generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id                    String              @id @default(cuid())
  name                  String?
  email                 String?             @unique
  phoneNumber           String?             @unique
  openedTickets         Ticket[]            @relation("openedBy")
  claimedTickets        Ticket[]            @relation("claimedBy")
  closedTickets         Ticket[]            @relation("closedBy")
  subscriptions         Subscription[]
  profileImages         UserProfileImage[]  
  currentProfileImage   UserProfileImage?   @relation("CurrentProfileImage", fields: [currentProfileImageId], references: [id])
  currentProfileImageId String?             @unique
  userImages            Image[]             
  comments              Comment[]           @relation("commentUser")
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  accounts              Account[]
  sessions              Session[]
  verificationTokens    VerificationToken[]
}

model Account {
  id                String
  compoundId        String   @unique @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refreshToken      String? 
  accessToken       String? 
  expiresAt         Int?
  tokenType         String?
  scope             String?
  idToken           String? 
  sessionState      String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())
  user              User     @relation(fields: [userId], references: [id])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  id          String   @id @default(cuid())
  identifier  String
  token       String   @unique
  expires     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id])
}

model Fridge {
  id                   String         @id @default(cuid())
  tickets              Ticket[]
  isActive             Boolean        @default(true)
  subscriptions        Subscription[]
  latitude             Float
  longitude            Float
  streetAddress        String
  zipCode              Int
  neighborhood         String?
  fridgeImages         FridgeImage[]  
  fridgeProfileImage   FridgeImage?  @relation("FridgeProfileImage", fields: [fridgeProfileImageId], references: [id])
  fridgeProfileImageId String?        @unique
  comments             Comment[]      @relation("commentFridge")
  description          String?
  inventoryItems       InventoryItem[]
  status               FridgeStatus   @default(GREEN)
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
}

model Ticket {
  id          String      @id @default(cuid())
  serviceType serviceType
  openedBy    User        @relation(name: "openedBy", fields: [openedById], references: [id])
  openedById  String
  claimedBy   User[]      @relation("claimedBy")
  closedBy    User?       @relation(name: "closedBy", fields: [closedById], references: [id])
  closedById  String
  isOpen      Boolean     @default(true)
  fridge      Fridge      @relation(fields: [fridgeId], references: [id])
  fridgeId    String
  description String
  comments    Comment[]   @relation("commentTicket")
  images      Image[]
  status      TicketStatus @default(OPEN)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Subscription {
  id                  String  @id @default(cuid())
  user                User    @relation(fields: [userId], references: [id])
  userId              String
  fridge              Fridge  @relation(fields: [fridgeId], references: [id])
  fridgeId            String
  notifyWhenFoodAdded Boolean @default(false)
  notifyMaintenance   Boolean @default(false)
  notifyCleaning      Boolean @default(false)
  notifyTransportation Boolean @default(false)
  notifyOthers        Boolean @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Image {
  id                String              @id @default(cuid())
  url               String
  caption           String?
  addedBy           User                @relation(fields: [addedById], references: [id])
  addedById         String
  type              imageType
  userProfileImages UserProfileImage[]  @relation("imageUserProfileImages")
  fridgeImages      FridgeImage[]       @relation("imageFridgeImages")
  ticket            Ticket?             @relation(fields: [ticketId], references: [id])
  ticketId          String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model UserProfileImage {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  image  Image  @relation("imageUserProfileImages", fields: [imageId], references: [id])
  imageId String
  userCurrentProfileImage User? @relation("CurrentProfileImage")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FridgeImage {
  id       String          @id @default(cuid())
  fridge   Fridge          @relation(fields: [fridgeId], references: [id])
  fridgeId String
  image    Image           @relation("imageFridgeImages", fields: [imageId], references: [id])
  imageId  String
  type     FridgeImageType @default(OTHER)
  fridgeProfileImage Fridge? @relation("FridgeProfileImage")
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model InventoryItem {
  id        String   @id @default(cuid())
  fridge    Fridge   @relation(fields: [fridgeId], references: [id])
  fridgeId  String
  foodItem  String
  quantity  Int
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        String      @id @default(cuid())
  user      User        @relation("commentUser", fields: [userId], references: [id])
  userId    String
  ticket    Ticket?     @relation("commentTicket", fields: [ticketId], references: [id])
  ticketId  String?
  fridge    Fridge?     @relation("commentFridge", fields: [fridgeId], references: [id])
  fridgeId  String?
  text      String
  type      commentType
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

enum serviceType {
  MAINTENANCE
  CLEANING
  TRANSPORTATION
  MISC
}

enum imageType {
  USER
  FRIDGE
  OTHER
}

enum FridgeImageType {
  INSIDE
  OUTSIDE
  ISSUE
  OTHER
}

enum commentType {
  TICKET
  FRIDGE
}

enum FridgeStatus {
  GREEN
  YELLOW
  RED
}

enum TicketStatus {
  OPEN
  CLOSED
}