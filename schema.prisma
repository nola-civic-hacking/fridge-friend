generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id                    String              @id @default(cuid())
  name                  String?
  email                 String?             @unique
  phoneNumber           String?             @unique
  openedTickets         Ticket[]            @relation("openedBy")
  claimedTickets        Ticket[]            @relation("claimedBy")
  closedTickets         Ticket[]            @relation("closedBy")
  subscriptions         Subscription[]
  profileImages         UserProfileImages[] @relation("profileImages")
  currentProfileImage   UserProfileImages?  @relation("currentProfileImage", fields: [currentProfileImageId], references: [id])
  currentProfileImageId String?             @unique
  images                Image[]             @relation("userImages")
  // "image" represents current
  Image                 Image?              @relation(fields: [imageId], references: [id])
  imageId               String?
}

model Fridge {
  id                   String         @id @default(cuid())
  tickets              Ticket[] // This is All tickets for the fridge (past and present, closed or open)
  status               Boolean        @default(true) // This is whether or not the fridge is active and running
  subscriptions        Subscription[]
  latitude             Float
  longitude            Float
  streetAddress        String
  zipCode              Int
  neighborhood         String?
  fridgeImages         FridgeImages[]
  fridgeProfileImage   FridgeImages?  @relation("fridgeProfileImage", fields: [fridgeProfileImageId], references: [id])
  fridgeProfileImageId String?        @unique
  comments             Comment[]      @relation("commentFridge")
  description          String?
}

model Ticket {
  id          String      @id @default(cuid())
  serviceType serviceType
  openedBy    User        @relation(name: "openedBy", fields: [openedById], references: [id])
  openedById  String
  claimedBy   User[]      @relation("claimedBy")
  closedBy    User?       @relation(name: "closedBy", fields: [closedById], references: [id])
  closedById  String
  isOpen      Boolean     @default(true)
  fridge      Fridge      @relation(fields: [fridgeId], references: [id])
  fridgeId    String
  description String
  comments    Comment[]   @relation("commentTicket")
  images      Image[]
}

model Subscription {
  id             String  @id @default(cuid())
  user           User    @relation(fields: [userId], references: [id])
  userId         String
  fridge         Fridge  @relation(fields: [fridgeId], references: [id])
  fridgeId       String
  foodAdded      Boolean @default(false)
  maintenance    Boolean @default(false)
  cleaning       Boolean @default(false)
  // maybe foodaction should be included in miscellaneous
  // foodAction     Boolean @default(false)
  transportation Boolean @default(false)
  misc           Boolean @default(false)
}

model Image {
  id                String              @id @default(cuid())
  url               String
  caption           String?
  addedBy           User                @relation("userImages", fields: [addedById], references: [id])
  addedById         String              @unique
  type              imageType
  userProfileImages UserProfileImages[]
  fridgeImages      FridgeImages[]
  User              User[]
  ticket            Ticket?             @relation(fields: [ticketId], references: [id])
  ticketId          String?
}

model UserProfileImages {
  id     String @id @default(cuid())
  user   User   @relation("profileImages", fields: [userId], references: [id])
  userId String

  image       Image  @relation(fields: [imageId], references: [id])
  imageId     String
  userProfile User?  @relation("currentProfileImage")
}

model FridgeImages {
  id       String          @id @default(cuid())
  fridge   Fridge          @relation(fields: [fridgeId], references: [id])
  fridgeId String
  image    Image           @relation(fields: [imageId], references: [id])
  imageId  String
  type     FridgeImageType @default(OTHER)

  fridgeProfile Fridge? @relation("fridgeProfileImage")
}

model Comment {
  id       String      @id @default(cuid())
  type     commentType
  text     String
  ticket   Ticket?     @relation("commentTicket", fields: [ticketId], references: [id])
  ticketId String?
  fridge   Fridge?     @relation("commentFridge", fields: [fridgeId], references: [id])
  fridgeId String?
}

enum serviceType {
  // maybe the FOODACTION is part of MISC
  //FOODACTION
  MAINTENANCE
  CLEANING
  TRANSPORTATION
  MISC
}

enum imageType {
  USER
  FRIDGE
  OTHER
}

enum FridgeImageType {
  INSIDE
  OUTSIDE
  ISSUE
  OTHER
}

enum commentType {
  TICKET
  FRIDGE
}
